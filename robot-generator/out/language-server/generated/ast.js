"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.RobotGeneratorAstReflection = exports.isRobotType = exports.RobotType = exports.isRobotName = exports.RobotName = exports.isPositionValue = exports.PositionValue = exports.isPerson = exports.Person = exports.isModel = exports.Model = exports.isGreeting = exports.Greeting = exports.isDslCommand = exports.DslCommand = exports.isCommandType = exports.CommandType = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.CommandType = 'CommandType';
function isCommandType(item) {
    return exports.reflection.isInstance(item, exports.CommandType);
}
exports.isCommandType = isCommandType;
exports.DslCommand = 'DslCommand';
function isDslCommand(item) {
    return exports.reflection.isInstance(item, exports.DslCommand);
}
exports.isDslCommand = isDslCommand;
exports.Greeting = 'Greeting';
function isGreeting(item) {
    return exports.reflection.isInstance(item, exports.Greeting);
}
exports.isGreeting = isGreeting;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.Person = 'Person';
function isPerson(item) {
    return exports.reflection.isInstance(item, exports.Person);
}
exports.isPerson = isPerson;
exports.PositionValue = 'PositionValue';
function isPositionValue(item) {
    return exports.reflection.isInstance(item, exports.PositionValue);
}
exports.isPositionValue = isPositionValue;
exports.RobotName = 'RobotName';
function isRobotName(item) {
    return exports.reflection.isInstance(item, exports.RobotName);
}
exports.isRobotName = isRobotName;
exports.RobotType = 'RobotType';
function isRobotType(item) {
    return exports.reflection.isInstance(item, exports.RobotType);
}
exports.isRobotType = isRobotType;
class RobotGeneratorAstReflection {
    getAllTypes() {
        return ['CommandType', 'DslCommand', 'Greeting', 'Model', 'Person', 'PositionValue', 'RobotName', 'RobotType'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }
    getReferenceType(referenceId) {
        switch (referenceId) {
            case 'Greeting:person': {
                return exports.Person;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}
exports.RobotGeneratorAstReflection = RobotGeneratorAstReflection;
exports.reflection = new RobotGeneratorAstReflection();
//# sourceMappingURL=ast.js.map