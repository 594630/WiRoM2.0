/******************************************************************************
 * This file was generated by langium-cli 0.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode } from 'langium';

export interface CommandType extends AstNode {
    readonly $container: DslCommand;
    value: 'addRobot' | 'removeRobot'
}

export const CommandType = 'CommandType';

export function isCommandType(item: unknown): item is CommandType {
    return reflection.isInstance(item, CommandType);
}

export interface DslCommand extends AstNode {
    readonly $container: Model;
    commandType: CommandType
    robotName: RobotName
    robotType: RobotType
    xValue: PositionValue
    yValue: PositionValue
}

export const DslCommand = 'DslCommand';

export function isDslCommand(item: unknown): item is DslCommand {
    return reflection.isInstance(item, DslCommand);
}

export interface Model extends AstNode {
    dslCommands: Array<DslCommand>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface PositionValue extends AstNode {
    readonly $container: DslCommand;
    positionValue: number
}

export const PositionValue = 'PositionValue';

export function isPositionValue(item: unknown): item is PositionValue {
    return reflection.isInstance(item, PositionValue);
}

export interface RobotName extends AstNode {
    readonly $container: DslCommand;
    name: string
}

export const RobotName = 'RobotName';

export function isRobotName(item: unknown): item is RobotName {
    return reflection.isInstance(item, RobotName);
}

export interface RobotType extends AstNode {
    readonly $container: DslCommand;
    value: 'bb8' | 'mavic2pro' | 'moose' | 'op2' | 'pr2'
}

export const RobotType = 'RobotType';

export function isRobotType(item: unknown): item is RobotType {
    return reflection.isInstance(item, RobotType);
}

export type RobotGeneratorAstType = 'CommandType' | 'DslCommand' | 'Model' | 'PositionValue' | 'RobotName' | 'RobotType';

export type RobotGeneratorAstReference = never;

export class RobotGeneratorAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['CommandType', 'DslCommand', 'Model', 'PositionValue', 'RobotName', 'RobotType'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: RobotGeneratorAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new RobotGeneratorAstReflection();
