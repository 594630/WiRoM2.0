// Running example of the paper
// main1

module Running1;

interface ITaskQueue{
  Unit addTask(ITask tk);
  Unit addTasks(List<ITask> list);
  Unit consumeQueue(ITaskSynchronize sync);
}

class TaskQueue( List<ITask> pending) implements ITaskQueue {
  
  Unit addTask(ITask tk){
    pending = appendright(pending,tk);
  }
  
  Unit addTasks(List<ITask> list){
    while (list != Nil) {
      ITask tk = head(list);
      list = tail(list);     
      Fut<Unit> f = this!addTask(tk);
      await f?;
    }
  }


  Unit consumeQueue(ITaskSynchronize sync){
    while (pending != Nil) {
      ITask tk = head(pending);
      pending = tail(pending);
      Bool wait = tk.getWait();
      Bool notify = tk.getNotify();
      Bool waitForSync = sync.getSync();
      Fut<Unit> f=tk!start();
      
      if(wait == True){
        sync.wait();
        waitForSync = sync.getSync();
      }  
      
      if(notify == True){
      	sync.notify();  
        waitForSync = sync.getSync();
      }
      
      while(waitForSync == True){
        waitForSync = sync.getSync();
      }
      
      
      await f?;
    }
  }
}  


interface ITaskSynchronize{
	Unit wait(); 
  	Unit notify();  
  	Bool getSync();
}

class TaskSynchronize implements ITaskSynchronize {
  	Bool wait = False;
      
	Unit wait(){
    	this.wait = True;
    }
  
  	Unit notify(){
    	this.wait = False;
    }
  
  	Bool getSync(){
    	return this.wait;
    }
}

interface ITask{
  Unit start();
  Bool getWait();
  Bool getNotify();
}

class TaskAsync implements ITask{
  Bool wait = False;
  Bool notify = False;
  Unit start(){
  }
  Bool getWait(){
    return this.wait;
  }
  Bool getNotify(){
    return this.notify;
  }
}


class TaskWait implements ITask{
  Bool wait = True;
  Bool notify = False;
  Unit start(){
  }
  
  Bool getWait(){
    return this.wait;
  }
  Bool getNotify(){
    return this.notify;
  }
}


class TaskNotify implements ITask{
  Bool wait = False;
  Bool notify = True;
  Unit start(){
  }
  Bool getWait(){
    return this.wait;
  }
  Bool getNotify(){
    return this.notify;
  }
}


{
  ITask tAsync = new local TaskAsync();
  ITask tWait = new local TaskWait();
  ITask tNotify = new local TaskNotify();
  ITaskSynchronize sync = new local TaskSynchronize();
  List<ITask> l1 = list[ tAsync, tWait, tNotify ];
  List<ITask> l2 = list[ tAsync, tWait, tNotify];

  ITaskQueue q1 = new local TaskQueue(Nil);
  ITaskQueue q2 = new local TaskQueue(Nil);

  Fut<Unit> f1 = q1!addTasks(l1);
  Fut<Unit> f2 = q2!addTasks(l2);

  await f1?;
  await f2?;

  q1!consumeQueue(sync);
  q2!consumeQueue(sync);
}
