/**
 * generated by Xtext 2.25.0
 */
package org.gunnarkleiven.robotgenerator.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.gunnarkleiven.robotgenerator.robotgenerator.Command;
import org.gunnarkleiven.robotgenerator.robotgenerator.PositionValue;
import org.gunnarkleiven.robotgenerator.robotgenerator.RobotName;
import org.gunnarkleiven.robotgenerator.robotgenerator.RobotType;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RobotgeneratorGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Command> _filter = Iterables.<Command>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Command.class);
    for (final Command e : _filter) {
      {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("robotgenerator/");
        String _value = e.getRobotName().getValue();
        _builder.append(_value);
        _builder.append("/");
        String _value_1 = e.getRobotName().getValue();
        _builder.append(_value_1);
        _builder.append("_controller.py");
        fsa.generateFile(_builder.toString(), this.compile_controller(e));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("robotgenerator/");
        String _value_2 = e.getRobotName().getValue();
        _builder_1.append(_value_2);
        _builder_1.append("/");
        String _value_3 = e.getRobotName().getValue();
        _builder_1.append(_value_3);
        _builder_1.append(".json");
        fsa.generateFile(_builder_1.toString(), this.compile_json(e));
        boolean _equals = e.getRobotType().equals(RobotType.MOOSE);
        if (_equals) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("robotgenerator/");
          String _value_4 = e.getRobotName().getValue();
          _builder_2.append(_value_4);
          _builder_2.append("/");
          String _value_5 = e.getRobotName().getValue();
          _builder_2.append(_value_5);
          _builder_2.append("_simpleactions.py");
          fsa.generateFile(_builder_2.toString(), this.compile_moose(e));
        } else {
          boolean _equals_1 = e.getRobotType().equals(RobotType.MAVIC2PRO);
          if (_equals_1) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("robotgenerator/");
            String _value_6 = e.getRobotName().getValue();
            _builder_3.append(_value_6);
            _builder_3.append("/");
            String _value_7 = e.getRobotName().getValue();
            _builder_3.append(_value_7);
            _builder_3.append(".py");
            fsa.generateFile(_builder_3.toString(), this.compile_mavic2pro(e));
          }
        }
      }
    }
  }
  
  public CharSequence compile_moose(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"moose_controller simpleactions.\"\"\"");
    _builder.newLine();
    _builder.append("from controller import Robot, Motor, PositionSensor, GPS, Compass");
    _builder.newLine();
    _builder.append("# from flask import Flask, request");
    _builder.newLine();
    _builder.append("import math");
    _builder.newLine();
    _builder.append("import threading");
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.append("import logging");
    _builder.newLine();
    _builder.append("import os");
    _builder.newLine();
    _builder.append("import pika");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# create the Robot instance.");
    _builder.newLine();
    _builder.append("robot = Robot()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# get the time step of the current world.");
    _builder.newLine();
    _builder.append("timestep = int(robot.getBasicTimeStep())");
    _builder.newLine();
    _builder.newLine();
    _builder.append("left_motor_names = [\"left motor 1\", \"left motor 2\",");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\"left motor 3\", \"left motor 4\"]");
    _builder.newLine();
    _builder.append("right_motor_names = [\"right motor 1\",");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("\"right motor 2\", \"right motor 3\", \"right motor 4\"]");
    _builder.newLine();
    _builder.append("left_motors = [robot.getDevice(name) for name in left_motor_names]");
    _builder.newLine();
    _builder.append("right_motors = [robot.getDevice(name) for name in right_motor_names]");
    _builder.newLine();
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# get and enable nodes used by the robot");
    _builder.newLine();
    _builder.append("gps = robot.getDevice(\'gps\')");
    _builder.newLine();
    _builder.append("compass = robot.getDevice(\'compass\')");
    _builder.newLine();
    _builder.append("gps.enable(timestep)");
    _builder.newLine();
    _builder.append("compass.enable(timestep)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("target_reached = False");
    _builder.newLine();
    _builder.append("navigate = False");
    _builder.newLine();
    _builder.append("location = []");
    _builder.newLine();
    _builder.append("simpleactions = []");
    _builder.newLine();
    _builder.newLine();
    _builder.append("moose_name = \"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Initialize which sets the target altitude as well as start the main loop");
    _builder.newLine();
    _builder.append("def init(port, name):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global moose_name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("logging.info(\"init\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("moose_name = name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("main = threading.Thread(target=moose_main)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("communication = threading.Thread(target=test_receive_routing_message)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("location_communication = threading.Thread(target=test_receive_location)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("main.start()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("communication.start()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("location_communication.start()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_forward(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global left_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global right_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("left_speed = 7.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("right_speed = 7.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(f\"Moose sleeping for {duration} seconds\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_backward(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global left_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global right_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("left_speed = -2.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("right_speed = -2.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def turn_left(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global left_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global right_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("left_speed = 1.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("right_speed = 4.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def turn_right(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global left_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global right_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("left_speed = 4.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("right_speed = 1.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_to_location(target):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global location");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global navigate");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if not location and target:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("location = [target]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("navigate = True");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while navigate:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(1)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def stop_movement():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global left_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global right_speed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("left_speed = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("right_speed = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Function that finds the angle and distance to a location and moves the vehicle accordingly");
    _builder.newLine();
    _builder.append("def navigate_to_location():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global navigate");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global location");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("loc = location[0]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pos = gps.getValues()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("north = compass.getValues()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front = [-north[0], north[1], north[2]]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dir = [loc[0] - pos[0], loc[1] - pos[2]]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("distance = math.sqrt(dir[0] * dir[0] + dir[1] * dir[1])");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# calculate the angle of which the vehicle is supposed to go to reach target");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("angle = math.atan2(dir[1], dir[0]) - math.atan2(front[2], front[0])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if angle < 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("angle += 2 * math.pi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# vehicle is on the right path when angle = math.pi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if angle < math.pi - 0.01:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("turn_left(0)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif angle > math.pi + 0.01:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("turn_right(0)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("go_forward(0)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# stop vehicle and navigation when target has been reached");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if distance < 1:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(\'Reached target\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("navigate = False");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("location.pop(0)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("stop_movement()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Actively wait for new location");
    _builder.newLine();
    _builder.append("def receive_location_from_robot():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while not location:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(1)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# write the location of this robot to the config file");
    _builder.newLine();
    _builder.append("def setLocationConfig():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with open(\'../config.json\') as json_data_file:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data = json.load(json_data_file)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with open(\'../config.json\', \'w\') as json_data_file:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data[\'robots\'][\'moose\'][\'location\'] = {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"x\": gps.getValues()[0], \"y\": gps.getValues()[2]}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("json.dump(data, json_data_file, indent=2, sort_keys=True)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def moose_main():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("logging.info(\"moose_main\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("step_count = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for motor in left_motors:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("motor.setPosition(float(\'inf\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for motor in right_motors:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("motor.setPosition(float(\'inf\'))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while robot.step(timestep) != -1:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if navigate:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("navigate_to_location()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for motor in left_motors:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("motor.setVelocity(left_speed)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for motor in right_motors:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("motor.setVelocity(right_speed)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# print(f\'(moose) step number {step_count}\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("step_count += 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# logging.info(step_count)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# print(\"main iteration\")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def execute_simpleactions():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while True:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if simpleactions:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("simpleaction = simpleactions.pop(0)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("print(\"Executing simpleaction \" + simpleaction)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("eval(simpleaction)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("print(\"No available simpleaction\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("except Exception as e:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(e)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def test_receive_routing_message():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global moose_name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("connection = pika.BlockingConnection(pika.ConnectionParameters(host=\'localhost\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel = connection.channel()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.exchange_declare(exchange=\'routing_exchange\', exchange_type=\'direct\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result = channel.queue_declare(queue=\'\', exclusive=True)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queue_name = result.method.queue");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.queue_bind(exchange=\'routing_exchange\', queue=queue_name, routing_key=f\"{moose_name}_queue\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"Moose ready to receive routed messages\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.basic_consume(queue=queue_name, on_message_callback=execute_simpleactions_callback, auto_ack=True)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.start_consuming()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def test_receive_location():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global moose_name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("connection = pika.BlockingConnection(pika.ConnectionParameters(host=\'localhost\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel = connection.channel()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.exchange_declare(exchange=\'location_exchange\', exchange_type=\'direct\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result = channel.queue_declare(queue=\'\', exclusive=True)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queue_name = result.method.queue");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.queue_bind(exchange=\'location_exchange\', queue=queue_name, routing_key=f\"{moose_name}_location_queue\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"Moose ready to receive locations\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.basic_consume(queue=queue_name, on_message_callback=receive_location_callback, auto_ack=True)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.start_consuming()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def execute_simpleactions_callback(ch, method, properties, body):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"(moose) callback: %r\" % body)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# TODO as for now, the incoming messages are functions calls, separated by \",\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# simpleactions.extend(body.decode(\'utf-8\').split(\",\"))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Decode the JSON back to a list");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new_simpleactions = json.loads(body.decode(\'utf-8\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("simpleactions.extend(new_simpleactions)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(f\'(moose) Simpleactions = {simpleactions}, type={type(simpleactions)}\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Now execute the simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# for i in range(len(simpleactions)):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while simpleactions:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sim_act = simpleactions.pop(0)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(\"(moose) Executing simpleaction \" + sim_act)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eval(sim_act)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"finished callback function\")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def receive_location_callback(ch, method, properties, body):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global location");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"(moose) received locations\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new_location = json.loads(body.decode(\'utf-8\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("location.append(new_location[\'location\'])");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_mavic2pro(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"\"\"mavic2pro_controller simpleactions.\"\"\"");
    _builder.newLine();
    _builder.append("from controller import Robot, Motor, PositionSensor, Gyro, Camera, InertialUnit, GPS, Compass, CameraRecognitionObject");
    _builder.newLine();
    _builder.append("import math");
    _builder.newLine();
    _builder.append("import threading");
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import json");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import logging");
    _builder.newLine();
    _builder.append("import pika");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# create the Robot instance.");
    _builder.newLine();
    _builder.append("robot = Robot()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# get the time step of the current world.");
    _builder.newLine();
    _builder.append("timestep = int(robot.getBasicTimeStep())");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# get the motors for the robot");
    _builder.newLine();
    _builder.append("front_left_motor = robot.getDevice(\'front left propeller\')");
    _builder.newLine();
    _builder.append("front_right_motor = robot.getDevice(\'front right propeller\')");
    _builder.newLine();
    _builder.append("rear_left_motor = robot.getDevice(\'rear left propeller\')");
    _builder.newLine();
    _builder.append("rear_right_motor = robot.getDevice(\'rear right propeller\')");
    _builder.newLine();
    _builder.append("motors = [front_left_motor, front_right_motor,");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("rear_left_motor, rear_right_motor]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# get and enable nodes used by the robot");
    _builder.newLine();
    _builder.append("gyro = robot.getDevice(\'gyro\')");
    _builder.newLine();
    _builder.append("iu = robot.getDevice(\'inertial unit\')");
    _builder.newLine();
    _builder.append("gps = robot.getDevice(\'gps\')");
    _builder.newLine();
    _builder.append("compass = robot.getDevice(\'compass\')");
    _builder.newLine();
    _builder.append("camera = robot.getDevice(\'camera\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("gyro.enable(timestep)");
    _builder.newLine();
    _builder.append("iu.enable(timestep)");
    _builder.newLine();
    _builder.append("gps.enable(timestep)");
    _builder.newLine();
    _builder.append("compass.enable(timestep)");
    _builder.newLine();
    _builder.append("camera.enable(timestep)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# empirically found constants for the drone to perform stable flight; inspired by the drone demo controller");
    _builder.newLine();
    _builder.append("k_vertical_thrust = 68.5  # with this thrust, the drone lifts.");
    _builder.newLine();
    _builder.append("# Vertical offset where the robot actually targets to stabilize itself.");
    _builder.newLine();
    _builder.append("k_vertical_offset = 0.6");
    _builder.newLine();
    _builder.append("k_vertical_p = 3.0  # P constant of the vertical PID.");
    _builder.newLine();
    _builder.append("k_roll_p = 50.0  # P constant of the roll PID.");
    _builder.newLine();
    _builder.append("k_pitch_p = 30.0  # P constant of the pitch PID.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# variables that control the movement of the drone");
    _builder.newLine();
    _builder.append("target_altitude = 0");
    _builder.newLine();
    _builder.append("roll_disturbance = 0");
    _builder.newLine();
    _builder.append("pitch_disturbance = 0");
    _builder.newLine();
    _builder.append("yaw_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# variables to set drone functions");
    _builder.newLine();
    _builder.append("rec_obj_arr = []");
    _builder.newLine();
    _builder.append("recognise = False");
    _builder.newLine();
    _builder.append("navigate = False");
    _builder.newLine();
    _builder.append("target_reached = False");
    _builder.newLine();
    _builder.append("message_recipient = \'\'");
    _builder.newLine();
    _builder.append("location = []");
    _builder.newLine();
    _builder.append("target_loc = []");
    _builder.newLine();
    _builder.append("simpleactions = []");
    _builder.newLine();
    _builder.append("amount_of_objects = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("mavic_name = \"\"");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Initialize which sets the target altitude as well as start the main loop");
    _builder.newLine();
    _builder.append("def init(port, name):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global mavic_name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("logging.info(\"init\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mavic_name = name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("main = threading.Thread(target=mavic2pro_main)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("communication = threading.Thread(target=test_receive_routing_message)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("main.start()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("communication.start()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def set_altitude(target):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global target_altitude");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("target_altitude = target");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("time.sleep(5)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_forward(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global pitch_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global yaw_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch_disturbance = 3");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yaw_disturbance = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pitch_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_backward(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global pitch_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch_disturbance = -2");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pitch_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def turn_right(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global yaw_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yaw_disturbance = 0.5");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("yaw_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def turn_left(duration):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global yaw_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yaw_disturbance = -0.5");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if duration != 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(duration)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("yaw_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def recognise_objects():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global recognise");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("recognise = True");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("camera.recognitionEnable(timestep)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def go_to_location(target):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global target_loc");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global navigate");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("target_loc = target");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("navigate = True");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while navigate:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("time.sleep(1)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def set_message_target(target):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(target)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global message_recipient");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message_recipient = target");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def stop_movement():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global pitch_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global yaw_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch_disturbance = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yaw_disturbance = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def send_location():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global amount_of_objects");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if not recognise:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("send = threading.Thread(target=sync_send_location)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("send.start()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif len(rec_obj_arr) > amount_of_objects:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("amount_of_objects = len(rec_obj_arr)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("send = threading.Thread(target=sync_send_location)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("send.start()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(\"No recognised object at location\")");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def sync_send_location():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global location");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("location_json = json.dumps({\"location\": [location[0], location[1] - 2]})");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("connection = pika.BlockingConnection(pika.ConnectionParameters(host=\'localhost\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel = connection.channel()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.exchange_declare(exchange=\'location_exchange\', exchange_type=\'direct\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# publish the moose message");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.basic_publish(exchange=\'location_exchange\', routing_key=message_recipient + \'_location_queue\',");
    _builder.newLine();
    _builder.append("                          ");
    _builder.append("body=location_json)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"[mavic sync_send_location] sent location to \" + message_recipient)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("connection.close()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Function that finds the angle and distance to a location and moves the vehicle accordingly");
    _builder.newLine();
    _builder.append("def navigate_to_location():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global navigate");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global target_loc");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pos = gps.getValues()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("north = compass.getValues()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front = [-north[0], north[1], north[2]]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dir = [target_loc[0] - pos[0], target_loc[1] - pos[2]]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("distance = math.sqrt(dir[0] * dir[0] + dir[1] * dir[1])");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# calculate the angle of which the vehicle is supposed to go to reach target");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("angle = math.atan2(dir[1], dir[0]) - math.atan2(front[2], front[0])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if angle < 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("angle += 2 * math.pi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# vehicle is on the right path when angle = math.pi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if angle < math.pi - 0.01:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("turn_left(0)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif angle > math.pi + 0.01:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("turn_right(0)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("go_forward(0)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# stop navigation and vehicle movements when target has been reached");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if distance < 1:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("navigate = False");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("stop_movement()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def CLAMP(value, low, high):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if value < low:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return low");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if value > high:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return high");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return value");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Function that calculates the values for each motor, keeping the drone stable");
    _builder.newLine();
    _builder.append("def stabilize_and_control_movement():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("roll = iu.getRollPitchYaw()[0] + math.pi / 2.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch = iu.getRollPitchYaw()[1]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("roll_acceleration = gyro.getValues()[0]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch_acceleration = gyro.getValues()[1]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("altitude = gps.getValues()[1]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Compute the roll, pitch, yaw and vertical inputs.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("roll_input = k_roll_p * CLAMP(roll, -1.0, 1.0) + \\");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("roll_acceleration + roll_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pitch_input = k_pitch_p * \\");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("CLAMP(pitch, -1.0, 1.0) - pitch_acceleration + pitch_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yaw_input = yaw_disturbance");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("clamped_difference_altitude = CLAMP(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("target_altitude - altitude + k_vertical_offset, -1.0, 1.0)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("vertical_input = k_vertical_p * pow(clamped_difference_altitude, 3.0)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Actuate the motors taking into consideration all the computed inputs.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front_left_motor_input = k_vertical_thrust + \\");
    _builder.newLine();
    _builder.append("                             ");
    _builder.append("vertical_input - roll_input - pitch_input + yaw_input");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front_right_motor_input = k_vertical_thrust + \\");
    _builder.newLine();
    _builder.append("                              ");
    _builder.append("vertical_input + roll_input - pitch_input - yaw_input");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rear_left_motor_input = k_vertical_thrust + \\");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("vertical_input - roll_input + pitch_input - yaw_input");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rear_right_motor_input = k_vertical_thrust + \\");
    _builder.newLine();
    _builder.append("                             ");
    _builder.append("vertical_input + roll_input + pitch_input + yaw_input");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Set the motor velocities required for stabilization and movement");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front_left_motor.setVelocity(front_left_motor_input)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("front_right_motor.setVelocity(-front_right_motor_input)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rear_left_motor.setVelocity(-rear_left_motor_input)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rear_right_motor.setVelocity(rear_right_motor_input)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# write the location of this robot to the config file");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def setLocationConfig():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with open(\'../config.json\') as json_data_file:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data = json.load(json_data_file)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("with open(\'../config.json\', \'w\') as json_data_file:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("data[\'robots\'][\'mavic2pro\'][\'location\'] = {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"x\": gps.getValues()[0], \"y\": gps.getValues()[2]}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("json.dump(data, json_data_file, indent=2, sort_keys=True)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# main loop, starting and controlling the robot based on the global variables");
    _builder.newLine();
    _builder.append("def mavic2pro_main():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global recognise");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global navigate");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global rec_obj_arr");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global location");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("logging.info(\"maciv2pro_main\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("step_count = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for motor in motors:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("motor.setPosition(float(\'inf\'))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while robot.step(timestep) != -1:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("location = [gps.getValues()[0], gps.getValues()[2]]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if navigate:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("navigate_to_location()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("stabilize_and_control_movement()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if recognise and camera.getRecognitionObjects():");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for rec_obj in camera.getRecognitionObjects():");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if rec_obj.id not in rec_obj_arr:");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("rec_obj_arr.append(rec_obj.id)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("navigate = False");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("stop_movement()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# print(f\'(mavic) step number {step_count}\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("step_count += 1");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Function for executing simpleactions in the queue");
    _builder.newLine();
    _builder.append("def execute_simpleactions():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("logging.info(\"receive_simpleactions\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while robot.step(timestep) != -1:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if simpleactions:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("simpleaction = simpleactions.pop(0)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\'Executing simpleaction: \' + simpleaction)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("eval(simpleaction)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def test_receive_routing_message():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global mavic_name");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("connection = pika.BlockingConnection(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pika.ConnectionParameters(host=\'localhost\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel = connection.channel()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.exchange_declare(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exchange=\'routing_exchange\', exchange_type=\'direct\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result = channel.queue_declare(queue=\'\', exclusive=True)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queue_name = result.method.queue");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.queue_bind(exchange=\'routing_exchange\', queue=queue_name, routing_key=f\"{mavic_name}_queue\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(f\"{mavic_name} ready to receive routed messages\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.basic_consume(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queue=queue_name,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on_message_callback=execute_simpleactions_callback,");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("auto_ack=True");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("channel.start_consuming()");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def execute_simpleactions_callback(ch, method, properties, body):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("global simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\"(mavic2pro) callback: %r\" % body)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# TODO as for now, the incoming messages are functions calls, separated by \",\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# simpleactions.extend(body.decode(\'utf-8\').split(\",\"))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# simpleactions.extend(body.decode(\'utf-8\'))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("new_simpleactions = json.loads(body.decode(\'utf-8\'))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("simpleactions.extend(new_simpleactions)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(f\'(mavic) Simpleactions = {simpleactions}, type={type(simpleactions)}\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Now execute the simpleactions");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# for i in range(len(simpleactions)):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while simpleactions:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sim_act = simpleactions.pop(0)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(\"(mavic) Executing simpleaction \" + sim_act)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eval(sim_act)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(f\"(mavic2pro) finished callback function\")");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_controller(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("from ");
    String _string = command.getRobotType().toString();
    _builder.append(_string);
    _builder.append("_simpleactions import *");
    _builder.newLineIfNotEmpty();
    _builder.append("init(5003, \"");
    String _value = command.getRobotName().getValue();
    _builder.append(_value);
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile_json(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"");
    RobotType _robotType = command.getRobotType();
    _builder.append(_robotType, "\t");
    _builder.append("\"\": {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"type\": ");
    String _string = command.getRobotType().toString();
    _builder.append(_string, "\t\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"name\": \"");
    {
      RobotName _robotName = command.getRobotName();
      boolean _tripleNotEquals = (_robotName != null);
      if (_tripleNotEquals) {
        String _value = command.getRobotName().getValue();
        _builder.append(_value, "\t\t");
      } else {
        _builder.append("undefined");
      }
    }
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"location\": {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"x\": ");
    {
      PositionValue _xValue = command.getXValue();
      boolean _tripleNotEquals_1 = (_xValue != null);
      if (_tripleNotEquals_1) {
        int _value_1 = command.getXValue().getValue();
        _builder.append(_value_1, "\t\t\t");
      } else {
        _builder.append("\"undefined\"");
      }
    }
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("\"y\": ");
    {
      PositionValue _xValue_1 = command.getXValue();
      boolean _tripleNotEquals_2 = (_xValue_1 != null);
      if (_tripleNotEquals_2) {
        int _value_2 = command.getYValue().getValue();
        _builder.append(_value_2, "\t\t\t");
      } else {
        _builder.append("\"undefined\"");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String capitalizeType(final Command command) {
    return StringExtensions.toFirstUpper(command.getRobotType().toString());
  }
}
