/**
 * generated by Xtext 2.25.0
 */
package org.gunnarkleiven.robotgenerator.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.gunnarkleiven.robotgenerator.robotgenerator.Command;
import org.gunnarkleiven.robotgenerator.robotgenerator.PositionValue;
import org.gunnarkleiven.robotgenerator.robotgenerator.RobotName;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RobotgeneratorGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Command> _filter = Iterables.<Command>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Command.class);
    for (final Command e : _filter) {
      {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("robotgenerator/");
        String _value = e.getRobotName().getValue();
        _builder.append(_value);
        _builder.append("/");
        String _value_1 = e.getRobotName().getValue();
        _builder.append(_value_1);
        _builder.append("_controller.py");
        fsa.generateFile(_builder.toString(), this.compile_controller(e));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("robotgenerator/");
        String _value_2 = e.getRobotName().getValue();
        _builder_1.append(_value_2);
        _builder_1.append("/");
        String _value_3 = e.getRobotName().getValue();
        _builder_1.append(_value_3);
        _builder_1.append(".json");
        fsa.generateFile(_builder_1.toString(), this.compile_json(e));
      }
    }
  }
  
  public CharSequence compile_controller(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import sys");
    _builder.newLine();
    _builder.append("import os");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# simpleactions class");
    _builder.newLine();
    _builder.append("controller_path = os.path.join(os.getcwd(), os.pardir)");
    _builder.newLine();
    _builder.append("sys.path.insert(0, controller_path)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from ");
    String _string = command.getRobotType().toString();
    _builder.append(_string);
    _builder.append("_simpleactions_generator import ");
    String _capitalizeType = this.capitalizeType(command);
    _builder.append(_capitalizeType);
    _builder.append("SimpleactionsGenerator");
    _builder.newLineIfNotEmpty();
    String _string_1 = command.getRobotType().toString();
    _builder.append(_string_1);
    _builder.append("_simpleactions = ");
    String _capitalizeType_1 = this.capitalizeType(command);
    _builder.append(_capitalizeType_1);
    _builder.append("SimpleactionsGenerator(\"");
    {
      String _value = command.getRobotName().getValue();
      boolean _tripleNotEquals = (_value != null);
      if (_tripleNotEquals) {
        String _value_1 = command.getRobotName().getValue();
        _builder.append(_value_1);
      } else {
        _builder.append("undefined_");
        String _string_2 = command.getRobotType().toString();
        _builder.append(_string_2);
      }
    }
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    String _string_3 = command.getRobotType().toString();
    _builder.append(_string_3);
    _builder.append("_simpleactions.initiate_threads()");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile_json(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"");
    String _value = command.getCommandType().getValue();
    _builder.append(_value, "\t");
    _builder.append("\": {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"type\": \"");
    String _string = command.getRobotType().toString();
    _builder.append(_string, "\t\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"name\": \"");
    {
      RobotName _robotName = command.getRobotName();
      boolean _tripleNotEquals = (_robotName != null);
      if (_tripleNotEquals) {
        String _value_1 = command.getRobotName().getValue();
        _builder.append(_value_1, "\t\t");
      } else {
        _builder.append("undefined");
      }
    }
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"location\": {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"x\": ");
    {
      PositionValue _xValue = command.getXValue();
      boolean _tripleNotEquals_1 = (_xValue != null);
      if (_tripleNotEquals_1) {
        int _value_2 = command.getXValue().getValue();
        _builder.append(_value_2, "\t\t\t");
      } else {
        _builder.append("\"undefined\"");
      }
    }
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("\"y\": ");
    {
      PositionValue _xValue_1 = command.getXValue();
      boolean _tripleNotEquals_2 = (_xValue_1 != null);
      if (_tripleNotEquals_2) {
        int _value_3 = command.getYValue().getValue();
        _builder.append(_value_3, "\t\t\t");
      } else {
        _builder.append("\"undefined\"");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String capitalizeType(final Command command) {
    return StringExtensions.toFirstUpper(command.getRobotType().toString());
  }
}
