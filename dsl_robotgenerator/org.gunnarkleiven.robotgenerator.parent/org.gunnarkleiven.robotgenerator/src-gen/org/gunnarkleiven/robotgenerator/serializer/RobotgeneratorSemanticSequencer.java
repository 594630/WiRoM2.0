/*
 * generated by Xtext 2.25.0
 */
package org.gunnarkleiven.robotgenerator.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.gunnarkleiven.robotgenerator.robotgenerator.AddRobot;
import org.gunnarkleiven.robotgenerator.robotgenerator.Command;
import org.gunnarkleiven.robotgenerator.robotgenerator.Model;
import org.gunnarkleiven.robotgenerator.robotgenerator.PositionValue;
import org.gunnarkleiven.robotgenerator.robotgenerator.RemoveRobot;
import org.gunnarkleiven.robotgenerator.robotgenerator.RobotName;
import org.gunnarkleiven.robotgenerator.robotgenerator.RobotgeneratorPackage;
import org.gunnarkleiven.robotgenerator.services.RobotgeneratorGrammarAccess;

@SuppressWarnings("all")
public class RobotgeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RobotgeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RobotgeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RobotgeneratorPackage.ADD_ROBOT:
				sequence_CommandType(context, (AddRobot) semanticObject); 
				return; 
			case RobotgeneratorPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case RobotgeneratorPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RobotgeneratorPackage.POSITION_VALUE:
				sequence_PositionValue(context, (PositionValue) semanticObject); 
				return; 
			case RobotgeneratorPackage.REMOVE_ROBOT:
				sequence_CommandType(context, (RemoveRobot) semanticObject); 
				return; 
			case RobotgeneratorPackage.ROBOT_NAME:
				sequence_RobotName(context, (RobotName) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CommandType returns AddRobot
	 *
	 * Constraint:
	 *     value='addRobot'
	 */
	protected void sequence_CommandType(ISerializationContext context, AddRobot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotgeneratorPackage.Literals.COMMAND_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotgeneratorPackage.Literals.COMMAND_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandTypeAccess().getValueAddRobotKeyword_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommandType returns RemoveRobot
	 *
	 * Constraint:
	 *     value='removeRobot'
	 */
	protected void sequence_CommandType(ISerializationContext context, RemoveRobot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotgeneratorPackage.Literals.COMMAND_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotgeneratorPackage.Literals.COMMAND_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandTypeAccess().getValueRemoveRobotKeyword_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (commandType=CommandType robotType=RobotType robotName=RobotName? xValue=PositionValue? yValue=PositionValue?)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositionValue returns PositionValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_PositionValue(ISerializationContext context, PositionValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotgeneratorPackage.Literals.POSITION_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotgeneratorPackage.Literals.POSITION_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionValueAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RobotName returns RobotName
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_RobotName(ISerializationContext context, RobotName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RobotgeneratorPackage.Literals.ROBOT_NAME__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RobotgeneratorPackage.Literals.ROBOT_NAME__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRobotNameAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
