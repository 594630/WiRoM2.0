/*
 * generated by Xtext 2.25.0
 */
package org.gunnarkleiven.robotgenerator.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.gunnarkleiven.robotgenerator.ide.contentassist.antlr.internal.InternalRobotgeneratorParser;
import org.gunnarkleiven.robotgenerator.services.RobotgeneratorGrammarAccess;

public class RobotgeneratorParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RobotgeneratorGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RobotgeneratorGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandTypeAccess().getAlternatives(), "rule__CommandType__Alternatives");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getRobotTypeAccess().getAlternatives(), "rule__RobotType__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getRobotNameAccess().getGroup(), "rule__RobotName__Group__0");
			builder.put(grammarAccess.getPositionValueAccess().getGroup(), "rule__PositionValue__Group__0");
			builder.put(grammarAccess.getCommandTypeAccess().getGroup_0(), "rule__CommandType__Group_0__0");
			builder.put(grammarAccess.getCommandTypeAccess().getGroup_1(), "rule__CommandType__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getCommandsAssignment(), "rule__Model__CommandsAssignment");
			builder.put(grammarAccess.getCommandAccess().getCommandTypeAssignment_0(), "rule__Command__CommandTypeAssignment_0");
			builder.put(grammarAccess.getCommandAccess().getRobotTypeAssignment_2(), "rule__Command__RobotTypeAssignment_2");
			builder.put(grammarAccess.getCommandAccess().getRobotNameAssignment_4(), "rule__Command__RobotNameAssignment_4");
			builder.put(grammarAccess.getCommandAccess().getXValueAssignment_6(), "rule__Command__XValueAssignment_6");
			builder.put(grammarAccess.getCommandAccess().getYValueAssignment_8(), "rule__Command__YValueAssignment_8");
			builder.put(grammarAccess.getRobotNameAccess().getValueAssignment_1(), "rule__RobotName__ValueAssignment_1");
			builder.put(grammarAccess.getPositionValueAccess().getValueAssignment_1(), "rule__PositionValue__ValueAssignment_1");
			builder.put(grammarAccess.getCommandTypeAccess().getValueAssignment_0_1(), "rule__CommandType__ValueAssignment_0_1");
			builder.put(grammarAccess.getCommandTypeAccess().getValueAssignment_1_1(), "rule__CommandType__ValueAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RobotgeneratorGrammarAccess grammarAccess;

	@Override
	protected InternalRobotgeneratorParser createParser() {
		InternalRobotgeneratorParser result = new InternalRobotgeneratorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotgeneratorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotgeneratorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
